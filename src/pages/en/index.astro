---
import Layout from '../../layouts/Layout.astro';
import '../../styles/global.css';

// Charger les traductions
import fr from '../../translations/fr.json';
import en from '../../translations/en.json';

const translations = { fr, en };
const defaultLang = 'en';
---

<Layout title="Movelys - Business Management Solution" lang="en">
    <script>
      // Fonction de recherche améliorée
      
function setupSimpleSearch() {
  const searchInput = document.getElementById('searchInput');
  const searchButton = document.getElementById('searchButton');
  const searchMessage = document.getElementById('searchMessage');
  
  if (!searchInput || !searchButton || !searchMessage) {
    console.error('Éléments de recherche introuvables');
    return;
  }
  
  function showMessage(message, isError = false) {
    searchMessage.textContent = message;
    searchMessage.className = isError ? 'search-message error' : 'search-message';
    searchMessage.style.display = 'block';
    setTimeout(() => {
      searchMessage.style.display = 'none';
    }, 3000);
  }
  
  function removeHighlights() {
    document.querySelectorAll('.search-highlight').forEach(el => {
      const parent = el.parentNode;
      while (el.firstChild) parent.insertBefore(el.firstChild, el);
      parent.removeChild(el);
      parent.normalize();
    });
  }
  
  function performSearch() {
    const term = searchInput.value.trim();
    removeHighlights();
    if (!term) return; // Si vide, on retire tout surlignage et on arrête
    
    const regex = new RegExp(`\\b${term}\\b`, 'gi');
    let found = false;
    
    function searchInNode(node) {
      const childNodes = node.childNodes || [];
      for (let i = 0; i < childNodes.length; i++) {
        const childNode = childNodes[i];
        if (childNode.nodeType === Node.ELEMENT_NODE) {
          const tagName = childNode.tagName.toLowerCase();
          if (['script', 'style', 'textarea', 'input', 'button'].includes(tagName)) {
            continue;
          }
          searchInNode(childNode);
        } else if (childNode.nodeType === Node.TEXT_NODE && childNode.nodeValue.trim()) {
          const text = childNode.nodeValue;
          const parent = childNode.parentNode;
          if (regex.test(text)) {
            found = true;
            const fragment = document.createDocumentFragment();
            let lastIndex = 0;
            let match;
            regex.lastIndex = 0;
            while ((match = regex.exec(text)) !== null) {
              if (match.index > lastIndex) {
                fragment.appendChild(document.createTextNode(text.substring(lastIndex, match.index)));
              }
              const highlight = document.createElement('span');
              highlight.className = 'search-highlight';
              highlight.textContent = match[0];
              fragment.appendChild(highlight);
              lastIndex = match.index + match[0].length;
              if (match.index === regex.lastIndex) {
                regex.lastIndex++;
              }
            }
            if (lastIndex < text.length) {
              fragment.appendChild(document.createTextNode(text.substring(lastIndex)));
            }
            parent.replaceChild(fragment, childNode);
            break;
          }
        }
      }
    }
    searchInNode(document.body);
    if (found) {
      const firstMatch = document.querySelector('.search-highlight');
      if (firstMatch) {
        firstMatch.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    } else {
      showMessage("No results found ", true);
    }
  }
  
  searchButton.onclick = performSearch;
  searchInput.onkeydown = (e) => {
    if (e.key === 'Enter') performSearch();
    // Ajout : effacer = désélectionner
    if (e.key === 'Backspace' || e.key === 'Delete') {
      setTimeout(() => {
        if (!searchInput.value.trim()) removeHighlights();
      }, 0);
    }
  };
  // Ajout : effacer avec la souris
  searchInput.addEventListener('input', () => {
    if (!searchInput.value.trim()) removeHighlights();
  });
}
      
      // Initialize search when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupSimpleSearch);
      } else {
        setupSimpleSearch();
      }
      
      // Event handler for language buttons
      document.querySelectorAll('.language-button').forEach(button => {
        button.addEventListener('click', () => {
          const lang = button.dataset.lang;
          updateLanguage(lang);
        });
      });
      
      // Check preferred language on load
      const savedLang = localStorage.getItem('preferredLanguage') || 'en';
      if (savedLang !== 'en') {
        updateLanguage(savedLang);
      }
    </script>

    <!-- Theme management script -->
    <script is:inline>
      // Function to update page language
      function updateLanguage(lang) {
        // Update language in local storage
        localStorage.setItem('preferredLanguage', lang);
        
        // Update html lang attribute
        document.documentElement.lang = lang;
        
        // Update active class on language buttons
        document.querySelectorAll('.language-button').forEach(button => {
          if (button.dataset.lang === lang) {
            button.classList.add('active');
          } else {
            button.classList.remove('active');
          }
        });
        
        // Reload the page to apply translations
        window.location.href = `/${lang === 'fr' ? '' : lang}`;
      }
      
      document.addEventListener('DOMContentLoaded', function() {
        const themeToggle = document.getElementById('themeToggle');
        const themeIcon = document.getElementById('themeIcon');
        
        // Check for saved theme preference or use system preference
        const savedTheme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        // Apply theme
        if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
          document.documentElement.classList.add('dark-theme');
          if (themeIcon) themeIcon.setAttribute('fill', '#ffffff');
        }
        
        // Toggle theme
        if (themeToggle) {
          themeToggle.addEventListener('click', function() {
            document.documentElement.classList.toggle('dark-theme');
            const isDark = document.documentElement.classList.contains('dark-theme');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
            if (themeIcon) themeIcon.setAttribute('fill', isDark ? '#ffffff' : '#000000');
          });
        }
      });
    </script>

    <header class="header">
      <div class="container">
        <div class="logo">
          <img src="/images/logo.png" alt="Movelys Logo" style="height:70px; width:90px vertical-align:middle;" />
        </div>
        
        <div class="search-bar">
          <input type="text" id="searchInput" placeholder={translations[defaultLang].search.placeholder} />
          <button id="searchButton" aria-label="Search">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
              <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z"/>
            </svg>
          </button>
        </div>
        
        <div class="header-actions">
          <button id="themeToggle" class="icon-button" aria-label="Toggle theme">
            <svg id="themeIcon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z"/>
            </svg>
          </button>
          
          <div class="language-selector">
            <button class="language-button {defaultLang === 'fr' ? 'active' : ''}" data-lang="fr" aria-label="Version française">FR</button>
            <span class="language-separator">|</span>
            <button class="language-button {defaultLang === 'en' ? 'active' : ''}" data-lang="en" aria-label="English version">EN</button>
          </div>
          
          <a href="https://github.com/zamboukenfack/reproduction4" target="_blank" rel="noopener noreferrer" aria-label="GitHub">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
              <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z"/>
            </svg>
          </a>
        </div>
      </div>
    </header>

    <main class="main-content">
      <section class="hero">
        <div class="container">
          <div class="hero-text">
            <h1 class="hero-title">{translations[defaultLang].hero.title}</h1>
            <div class="intro-text">
              <p>{translations[defaultLang].hero.intro}</p>
              <p>{translations[defaultLang].hero.description1}</p>
              <p>{translations[defaultLang].hero.description2}</p>
              <p>{translations[defaultLang].hero.objective}</p>
              <ul>
                {translations[defaultLang].hero.lists.features.map((item, index) => (
                  <li set:html={item} />
                ))}
              </ul>
              <p>{translations[defaultLang].hero.automation_benefits}</p>
              <p>{translations[defaultLang].hero.target_audience}</p>
              <ul>
                {translations[defaultLang].hero.lists.roles.map((role, index) => (
                  <li set:html={role} />
                ))}
              </ul>
              <p>{translations[defaultLang].hero.roles_benefits}</p>
            </div>
          </div>
        </div>
      </section>

      <section class="video-section">
        <div class="container">
          <div class="video-intro">
            <p>To fully access the <strong>MOVELYS</strong> platform, we highly recommend watching the short video below. It clearly and systematically presents the entire onboarding process, from initial login to advanced feature usage. This will ensure an optimal start and a smooth user experience from the very beginning.</p>
          </div>
          <div class="video-wrapper">
            <video controls class="feature-video">
              <source src="video/videos.mp4" type="video/mp4">
              Your browser does not support video playback.
            </video>
          </div>
          <div class="cta-button">
            <a href="/en/page" class="btn btn-primary btn-lg">{translations[defaultLang].hero.cta}</a>
          </div>
        </div>
      </section>
    </main>

    <!-- Search result message -->
    <div id="searchMessage" class="search-message"></div>
    
    <script>
      // Simple video scroll control
      document.addEventListener('DOMContentLoaded', () => {
        const video = document.querySelector('.feature-video');
        if (!video) return;
        
        // Basic setup
        video.muted = true;
        video.playsInline = true;
        
        let lastScrollTop = 0;
        
        // Start initial playback
        video.play().catch(e => console.log('Autoplay prevented:', e));
        
        // Handle scrolling
        window.addEventListener('scroll', () => {
          const st = window.pageYOffset || document.documentElement.scrollTop;
          
          // Scrolling down
          if (st > lastScrollTop) {
            video.play().catch(e => console.log('Playback failed:', e));
          } 
          // Scrolling up
          else if (st < lastScrollTop) {
            video.pause();
          }
          
          lastScrollTop = st <= 0 ? 0 : st;
        }, { passive: true });
      });
    </script>
</Layout>
